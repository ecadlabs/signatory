on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
      - "rc*"
  pull_request:

name: Test and publish

permissions:
  contents: write
  deployments: write
  issues: write
  packages: write
  id-token: write
  actions: read

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: "${{ env.GO_VERSION }}"
      - uses: actions/checkout@v5
      - name: Run tests
        run: |
          export GIT_COMMIT_SHA='${{ github.sha }}'
          export GIT_BRANCH="$(echo '${{ github.ref }}' | sed -E -e 's/.*\/(.*)/\1/')"
          echo "Running tests..."
          mkdir unitcoverage
          go test -cover $(go list ./... | grep -v integration_test) -args -test.gocoverdir="$PWD/unitcoverage"
      - uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: ./unitcoverage/

  publish:
    name: Goreleaser
    runs-on: ubuntu-latest
    needs: test
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      image-amd64: ${{ steps.hash.outputs.image-amd64 }}
      digest-amd64: ${{ steps.hash.outputs.digest-amd64 }}
      image-arm64: ${{ steps.hash.outputs.image-arm64 }}
      digest-arm64: ${{ steps.hash.outputs.digest-arm64 }}
      image-armv7: ${{ steps.hash.outputs.image-armv7 }}
      digest-armv7: ${{ steps.hash.outputs.digest-armv7 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Write .env file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          touch .env
          echo GITHUB_TOKEN="$GITHUB_TOKEN" >> .env

      - name: Login to GHCR
        uses: docker/login-action@v3
        if: "!startsWith(github.ref, 'refs/tags/v')"
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: goreleaser release preview
        run: make release-preview
        if: "!startsWith(github.ref, 'refs/tags/v')"

      - name: remove slash from image tag
        uses: mad9000/actions-find-and-replace-string@5
        id: replaceslash
        with:
          source: ${{ github.head_ref || github.ref_name }}
          find: '/'
          replace: '-'
        if: "!startsWith(github.ref, 'refs/tags/v')"

      - name: Tag Docker images appropriately
        run: >
          docker tag ghcr.io/ecadlabs/signatory:${{ github.sha }}-amd64 ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-amd64;
          docker tag ghcr.io/ecadlabs/signatory:${{ github.sha }}-arm64 ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-arm64;
          docker tag ghcr.io/ecadlabs/signatory:${{ github.sha }}-armv7 ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-armv7;
        if: "!startsWith(github.ref, 'refs/tags/v')"

      - name: Push Signatory preview images to GH Container Registry
        run: >
         docker push ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-amd64;
         docker push ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-arm64;
         docker push ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-armv7;
        if: "!startsWith(github.ref, 'refs/tags/v')"

      - name: goreleaser release
        run: make release
        if: startsWith(github.ref, 'refs/tags/v')

      - name: Fix dist directory permissions
        run: sudo chown -R $(id -u):$(id -g) dist/
      
      - name: Generate outputs for SLSA provenance from Docker images
        id: hash
        run: |
          set -euo pipefail
          
          # Get image digests from local Docker after push
          AMD64_DIGEST=$(docker inspect ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-amd64 --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
          ARM64_DIGEST=$(docker inspect ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-arm64 --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
          ARMV7_DIGEST=$(docker inspect ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-armv7 --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
          
          echo "Image digests:"
          echo "  amd64: ${AMD64_DIGEST}"
          echo "  arm64: ${ARM64_DIGEST}"
          echo "  armv7: ${ARMV7_DIGEST}"
          
          # Output individual image names and digests
          echo "image-amd64=ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-amd64" >> "$GITHUB_OUTPUT"
          echo "digest-amd64=${AMD64_DIGEST}" >> "$GITHUB_OUTPUT"
          
          echo "image-arm64=ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-arm64" >> "$GITHUB_OUTPUT"
          echo "digest-arm64=${ARM64_DIGEST}" >> "$GITHUB_OUTPUT"
          
          echo "image-armv7=ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-armv7" >> "$GITHUB_OUTPUT"
          echo "digest-armv7=${ARMV7_DIGEST}" >> "$GITHUB_OUTPUT"
        if: "!startsWith(github.ref, 'refs/tags/v')"

  generate-provenance-amd64:
    if: "!startsWith(github.ref, 'refs/tags/v')"
    name: Generate SLSA provenance for amd64 image
    needs: [publish]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.publish.outputs.image-amd64 }}
      digest: ${{ needs.publish.outputs.digest-amd64 }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  generate-provenance-arm64:
    if: "!startsWith(github.ref, 'refs/tags/v')"
    name: Generate SLSA provenance for arm64 image
    needs: [publish]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.publish.outputs.image-arm64 }}
      digest: ${{ needs.publish.outputs.digest-arm64 }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  generate-provenance-armv7:
    if: "!startsWith(github.ref, 'refs/tags/v')"
    name: Generate SLSA provenance for armv7 image
    needs: [publish]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.publish.outputs.image-armv7 }}
      digest: ${{ needs.publish.outputs.digest-armv7 }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  verify-slsa:
    name: Verify SLSA provenance for Docker images
    runs-on: ubuntu-latest
    needs: [publish, generate-provenance-amd64, generate-provenance-arm64, generate-provenance-armv7]
    if: "!startsWith(github.ref, 'refs/tags/v')"
    permissions:
      actions: read
      id-token: write
      contents: read
    steps:
      - name: Remove slash from branch name
        uses: mad9000/actions-find-and-replace-string@5
        id: replaceslash
        with:
          source: ${{ github.head_ref || github.ref_name }}
          find: '/'
          replace: '-'

      - name: Download provenance for amd64
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.generate-provenance-amd64.outputs.provenance-name }}
          path: ./provenance-amd64

      - name: Download provenance for arm64
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.generate-provenance-arm64.outputs.provenance-name }}
          path: ./provenance-arm64

      - name: Download provenance for armv7
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.generate-provenance-armv7.outputs.provenance-name }}
          path: ./provenance-armv7

      - name: Install SLSA verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.5.1

      - name: Verify Docker image provenance
        run: |
          # Verify amd64 image
          echo "Verifying amd64 image..."
          slsa-verifier verify-image \
            ${{ needs.publish.outputs.image-amd64 }}@${{ needs.publish.outputs.digest-amd64 }} \
            --provenance-path ./provenance-amd64/*.intoto.jsonl \
            --source-uri github.com/${{ github.repository }}
          
          # Verify arm64 image
          echo "Verifying arm64 image..."
          slsa-verifier verify-image \
            ${{ needs.publish.outputs.image-arm64 }}@${{ needs.publish.outputs.digest-arm64 }} \
            --provenance-path ./provenance-arm64/*.intoto.jsonl \
            --source-uri github.com/${{ github.repository }}
          
          # Verify armv7 image
          echo "Verifying armv7 image..."
          slsa-verifier verify-image \
            ${{ needs.publish.outputs.image-armv7 }}@${{ needs.publish.outputs.digest-armv7 }} \
            --provenance-path ./provenance-armv7/*.intoto.jsonl \
            --source-uri github.com/${{ github.repository }}

  deploy-ec2:
    if: "!startsWith(github.ref, 'refs/tags/v')"
    needs: publish
    runs-on: ec2
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: "!startsWith(github.ref, 'refs/tags/v')"
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: remove slash from image tag
        uses: mad9000/actions-find-and-replace-string@5
        id: replaceslash
        with:
          source: ${{ github.head_ref || github.ref_name }}
          find: '/'
          replace: '-'
        if: "!startsWith(github.ref, 'refs/tags/v')"
      - name: pull and start the Signatory image under test
        env:
          IMAGE: ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-amd64
        run: >
         docker pull $IMAGE;
         docker stop signatory;
         docker rm signatory;
         docker run -d --name signatory --privileged --mount type=bind,src=/etc/signatory,dst=/etc/signatory --mount type=bind,src=/var/lib/signatory,dst=/var/lib/signatory -p 6732:6732 -p 9583:9583 --entrypoint "/bin/signatory" $IMAGE -c /etc/signatory/config.yml serve
        if: "!startsWith(github.ref, 'refs/tags/v')"

  integration-tests:
    # if: "!startsWith(github.ref, 'refs/tags/v')"
    if: false
    needs: deploy-ec2
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testenvs:
          - current
          - next
    steps:
      - uses: actions/checkout@v5
      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: "!startsWith(github.ref, 'refs/tags/v')"
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: remove slash from image tag
        uses: mad9000/actions-find-and-replace-string@5
        id: replaceslash
        with:
          source: ${{ github.head_ref || github.ref_name }}
          find: '/'
          replace: '-'
        if: "!startsWith(github.ref, 'refs/tags/v')"
      - if: ${{ !github.event.pull_request.head.repo.fork && !startsWith(github.ref, 'refs/tags/v')}}
        name: Tailscale
        uses: tailscale/github-action@v1
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
          version: 1.32.2        
      - name: Run tests
        env:
          IMAGE: ghcr.io/ecadlabs/signatory:${{ steps.replaceslash.outputs.value }}-amd64
          VAULT_AWS_USER: ${{ secrets.INTEGRATIONTEST_VAULT_AWS_USER }}
          VAULT_AWS_KEY: ${{ secrets.INTEGRATIONTEST_VAULT_AWS_KEY }}
          VAULT_AWS_SECRET: ${{ secrets.INTEGRATIONTEST_VAULT_AWS_SECRET }}
          VAULT_AWS_REGION: ${{ secrets.INTEGRATIONTEST_VAULT_AWS_REGION }}
          VAULT_AWS_TZ2: ${{ secrets.INTEGRATIONTEST_VAULT_AWS_TZ2 }}
          VAULT_AWS_TZ3: ${{ secrets.INTEGRATIONTEST_VAULT_AWS_TZ3 }}
          VAULT_AWS_TZ3_PK: ${{ secrets.INTEGRATIONTEST_VAULT_AWS_TZ3_PK }}
          VAULT_AZ_CLIENTCERTTHUMB: ${{ secrets.INTEGRATIONTEST_VAULT_AZ_CLIENTCERTTHUMB }}
          VAULT_AZ_CLIENTID: ${{ secrets.INTEGRATIONTEST_VAULT_AZ_CLIENTID }}
          VAULT_AZ_RESGROUP: ${{ secrets.INTEGRATIONTEST_VAULT_AZ_RESGROUP }}
          VAULT_AZ_SP_KEY: ${{ secrets.INTEGRATIONTEST_VAULT_AZ_SP_KEY }}
          VAULT_AZ_SUBID: ${{ secrets.INTEGRATIONTEST_VAULT_AZ_SUBID }}
          VAULT_AZ_TENANTID: ${{ secrets.INTEGRATIONTEST_VAULT_AZ_TENANTID }}
          VAULT_AZ_VAULT: ${{ secrets.INTEGRATIONTEST_VAULT_AZ_VAULT }}
          VAULT_AZ_TZ2: ${{ secrets.INTEGRATIONTEST_VAULT_AZ_TZ2 }}
          VAULT_AZ_TZ3: ${{ secrets.INTEGRATIONTEST_VAULT_AZ_TZ3 }}
          VAULT_AZ_TZ3_PK: ${{ secrets.INTEGRATIONTEST_VAULT_AZ_TZ3_PK }}
          VAULT_GCP_PROJECTID: ${{ secrets.INTEGRATIONTEST_VAULT_GCP_PROJECTID }}
          VAULT_GCP_PRIVATEKEYID: ${{ secrets.INTEGRATIONTEST_VAULT_GCP_PRIVATEKEYID }}
          VAULT_GCP_PRIVATEKEY: ${{ secrets.INTEGRATIONTEST_VAULT_GCP_PRIVATEKEY }}
          VAULT_GCP_CLIENTEMAIL: ${{ secrets.INTEGRATIONTEST_VAULT_GCP_CLIENTEMAIL }}
          VAULT_GCP_CLIENTID: ${{ secrets.INTEGRATIONTEST_VAULT_GCP_CLIENTID }}
          VAULT_GCP_X509_URL: ${{ secrets.INTEGRATIONTEST_VAULT_GCP_X509_URL }}
          VAULT_GCP_KEYRING: ${{ secrets.INTEGRATIONTEST_VAULT_GCP_KEYRING }}
          VAULT_GCP_LOCATION: ${{ secrets.INTEGRATIONTEST_VAULT_GCP_LOCATION }}
          VAULT_GCP_TZ3: ${{ secrets.INTEGRATIONTEST_VAULT_GCP_TZ3 }}
          VAULT_GCP_TZ3_PK: ${{ secrets.INTEGRATIONTEST_VAULT_GCP_TZ3_PK }}
        run: >
         cd integration_test;
         export ARCH=amd64;
         . ./.env.${{ matrix.testenvs }};
         envsubst < gcp-token-template.json > gcp-token.json;
         echo $VAULT_AZ_SP_KEY |base64 -d >service-principal.key;
         chmod 777 ./hashicerts;
         docker compose up -d --wait --pull always;
         cd tests;
         go test -p 1 ./...;
         cd ..;
         docker compose kill;
         rm -f gcp-token.json;
         rm -f service-principal.key;
      - uses: actions/upload-artifact@v4
        with:
          name: integration-test-coverage-env${{ matrix.testenvs }}
          path: ./integration_test/coverage/

  report-coverage:
    if: false
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v5
        with:
          go-version: "${{ env.GO_VERSION }}"
      - uses: actions/download-artifact@v5
        with:
          name: unit-test-coverage
          path: unit-test-coverage
      - uses: actions/download-artifact@v5
        with:
          name: integration-test-coverage-envcurrent
          path: integration-test-coverage-envcurrent
      - uses: actions/download-artifact@v5
        with:
          name: integration-test-coverage-envnext
          path: integration-test-coverage-envnext
      - name: Combine Coverages
        run: |
          echo "Generating coverage report..."
          export GIT_COMMIT_SHA='${{ github.sha }}'
          export GIT_BRANCH="$(echo '${{ github.ref }}' | sed -E -e 's/.*\/(.*)/\1/')"          
          go tool covdata textfmt -i=./unit-test-coverage,./integration-test-coverage-envcurrent,./integration-test-coverage-envnext -o ./c.out
          rm -rf ./unit-test-coverage
          rm -rf ./integration-test-coverage-envcurrent
          rm -rf ./integration-test-coverage-envnext
          sed -i 's/\/go\/src\/github.com/github.com/g' ./c.out
      - uses: qltysh/qlty-action/coverage@v2
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: c.out
          strip-prefix: github.com/ecadlabs/signatory/